//
//  MyBonusesModels.swift
//  FFKit
//
//  Created by Vinoth Palanisamy on 29/09/2016.
//  Copyright (c) 2016 mkodo. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol BonusDescribeable {
  var string: String { get }
  var description: String { get }
  func isType(_ type: BonusDescribeable, equalTo string: String) -> Bool
}

extension BonusDescribeable {
  
  var string: String {
    return "\(self)"
  }
  
  var description: String {
    return descriptionStringOf(self)
  }
  
  func isType(_ type: BonusDescribeable, equalTo typeString: String) -> Bool {
    return lowercase(of: type) == typeString.lowercased()
  }
  
  private func lowercase(of type: BonusDescribeable) -> String {
    return type.string.lowercased()
  }
  
  private func descriptionStringOf(_ type: BonusDescribeable) -> String {
    let regularExpression = try! NSRegularExpression(pattern: "([a-z])([A-Z])", options: NSRegularExpression.Options(rawValue: UInt(0)))
    var  stringToFormat = "\(type.string)"
    stringToFormat = regularExpression.stringByReplacingMatches(in: stringToFormat,
                                                                        options: [],
                                                                        range: NSMakeRange(0, stringToFormat.characters.count),
                                                                        withTemplate: "$1 $2")
    return stringToFormat.capitalized
  }
}


enum BonusStatus: BonusDescribeable {

  case active, partQualified, fulfilled, revoked, cancelled, declined, inherited,
  completed, expired, notQualified, optedOut, undeclined, freeSpinsRewarded,
  sportsbookRewarded, pending, none
  
  static let allValues = [active, partQualified, fulfilled, revoked, cancelled, declined, inherited,
                          completed, expired, notQualified, optedOut, undeclined, freeSpinsRewarded,
                          sportsbookRewarded, pending, none]
  
  internal init(type: String) {
    self = .none
    self = bonusStatus(from: type)
  }
  
  private func bonusStatus(from type: String) -> BonusStatus {
    for bonusStatus in BonusStatus.allValues {
      if isType(bonusStatus, equalTo: type) {
        return bonusStatus
      }
    }
    return .none
  }
  
}

enum WalletType: BonusDescribeable {
  case cash, bonus, games, gameTag, loyalty, freeSpins, sportsbook, none
  
  static let allValues = [cash, bonus, games, gameTag, loyalty, freeSpins, sportsbook, none]
  
  internal init(type: String) {
    self = .none
    self = walletType(from: type) ?? .none
  }
  
  private func walletType(from type: String) -> WalletType? {
    for walletType in WalletType.allValues {
      if isType(walletType, equalTo: type) {
        return walletType
      }
    }
    return .none
  }
}

enum WalletVertical: BonusDescribeable {
  case casino, bingo, custom, none
  
  static let allValues = [casino, bingo, custom, none]
  
  internal init(type: String) {
    self = .none
    self = walletVertical(from: type)
  }
  
  private func walletVertical(from type: String) -> WalletVertical {
    for verticalType in WalletVertical.allValues {
      if isType(verticalType, equalTo: type) {
        return verticalType
      }
    }
    return .none
  }
}

enum BonusType: BonusDescribeable {
  case firstDeposit, deposit, instant, playerRegistration,
  cardRegistration, depositOverPeriod, cashbackOnTotalStake,
  cashbackOnNetLosses, optIn, manualAdjusment, none
  
  static let allValues = [firstDeposit, deposit, instant, playerRegistration,
                          cardRegistration, depositOverPeriod, cashbackOnTotalStake,
                          cashbackOnNetLosses, optIn, manualAdjusment, none]
  
  internal init(type: String) {
    self = .none
    self = bonusType(from: type)
  }
  
  private func bonusType(from type: String) -> BonusType {
    for bonusType in BonusType.allValues {
      if isType(bonusType, equalTo: type) {
        return bonusType
      }
    }
    return .none
  }
}

struct Bonus {
  let id: String
  let bonusId: String
  let name: String
  let description: String
  let promoCode: String
  let amount: Double
  let status: BonusStatus
  let type: BonusType
  let walletType: WalletType
  let walletVertical: WalletVertical
  let startTime: String
  let endTime: String
  let activatedTime: String
  let expiryTime: String
  let termsAndConditions: String
  let qualificationEndDate: String
  let currentAccumulation: Double
  let targetAccumulation: Double
  let currentContributions: Double
  let wageringTarget: Double
}

struct PresentableBonus {
  let promoId: String
  let promoName: String
  let description: String
  let promoCode: String
  let promoStatus: String
  let promoType: String
  let optInDate: String
  let expiryDate: String
  let termsAndConditions: String
  let canOptOut: Bool
  let isTimeBonus: Bool
  let isWagering: Bool
  let amount: Amount
  let percentage: Percentage
  var bonusTimer: BonusTimer?
  var icon: UIImage?
}

struct Percentage {
  let number: Double
  let string: String
  let available: Bool
}

struct Amount {
  let inGBP: String
  let contributionsInGBP: String
  let targetInGBP: String
}

struct BonusTimer {
  let time: String
  let string: String
}
